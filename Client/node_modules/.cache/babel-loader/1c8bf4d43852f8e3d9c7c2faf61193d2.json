{"ast":null,"code":"var _jsxFileName = \"/Users/nasiranebi/Projects/twitter_project/src/Charts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Bar, Line, Pie, Doughnut } from \"react-chartjs-2\";\nimport axios from \"axios\"; //const hour = [];\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getCDU(data) {\n  const cdu = [];\n\n  for (let d in data) {\n    let cdunew = {\n      x: data[d]._id.hour,\n      y: data[d].count\n    };\n    cdu.push(cdunew);\n  }\n\n  return cdu;\n}\n\nfunction buildData(data, party) {\n  const spd = [];\n  const fdp = [];\n  const afd = [];\n  const linke = [];\n  const gruen = [];\n\n  if (party == \"CDU\") {\n    getCDU(data);\n  }\n  /*if (data[d]._id.party == \"SPD\") {\n      spd.push(data[d]);\n    }\n    if (data[d]._id.party == \"FDP\") {\n      fdp.push(data[d]);\n    }\n    if (data[d]._id.party == \"AfD\") {\n      afd.push(data[d]);\n    }\n    if (data[d]._id.party == \"Linke\") {\n      linke.push(data[d]);\n    }\n    if (data[d]._id.party == \"Grün\") {\n      gruen.push(data[d]);\n    }*/\n\n}\n\nconst t = [];\n\nfunction Charts() {\n  _s();\n\n  /*const [hour, setHour] = useState({});\n  const [party, setParty] = useState({});\n  const [count, setCount] = useState({});*/\n  const [cduu, setCDUU] = useState({});\n  const [hour, setHour] = useState({});\n  const options = {\n    responsive: true,\n    labels: hour,\n    tooltips: {\n      mode: \"label\"\n    },\n    elements: {\n      line: {\n        fill: false\n      }\n    },\n    scales: {\n      xAxes: [{\n        display: true\n      }],\n      yAxes: []\n    }\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"http://localhost:8080/jsonProcessed\").then(response => {\n        return response.json();\n      }).then(data => {\n        //console.log(data);\n        let chartdata = buildData(data, \"CDU\");\n        setCDUU(chartdata);\n        console.log(chartdata);\n\n        for (let d in data) {\n          t.push(data[d]._id.hour);\n        }\n\n        setHour(t); //t.push(chartdata);\n      });\n    };\n\n    fetchData();\n  }, []);\n  console.log(cduu);\n  /*axios.get(\"http://localhost:8080/jsonProcessed\").then((res) => {\n    //console.log(res.data);\n    for (let d in res.data) {\n      if (res.data[d]._id.party == \"CDU\") {\n        let cdunew = {\n          x: res.data[d]._id.hour,\n          y: res.data[d].count,\n        };\n        t.push(cdunew);\n      }\n    }\n  });\n  console.log(t);*/\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"charts\",\n    children: (cduu === null || cduu === void 0 ? void 0 : cduu.length) > 0 && /*#__PURE__*/_jsxDEV(Bar, {\n      data: {\n        labels: [15, 16, 17, 18, 19, 20, 21, 22],\n        datasets: [{\n          label: \"cdu\",\n          data: cduu\n        }]\n      },\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Charts, \"Gy73CGVtkstBw3YDJUeNEIGMdr0=\");\n\n_c = Charts;\nexport default Charts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Charts\");","map":{"version":3,"sources":["/Users/nasiranebi/Projects/twitter_project/src/Charts.js"],"names":["React","useEffect","useState","Bar","Line","Pie","Doughnut","axios","getCDU","data","cdu","d","cdunew","x","_id","hour","y","count","push","buildData","party","spd","fdp","afd","linke","gruen","t","Charts","cduu","setCDUU","setHour","options","responsive","labels","tooltips","mode","elements","line","fill","scales","xAxes","display","yAxes","fetchData","fetch","then","response","json","chartdata","console","log","length","datasets","label"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Bar, Line, Pie, Doughnut } from \"react-chartjs-2\";\nimport axios from \"axios\";\n\n//const hour = [];\nfunction getCDU(data) {\n  const cdu = [];\n\n  for (let d in data) {\n    let cdunew = {\n      x: data[d]._id.hour,\n      y: data[d].count,\n    };\n    cdu.push(cdunew);\n  }\n  return cdu;\n}\nfunction buildData(data, party) {\n  const spd = [];\n  const fdp = [];\n  const afd = [];\n  const linke = [];\n  const gruen = [];\n\n  if (party == \"CDU\") {\n    getCDU(data);\n  }\n\n  /*if (data[d]._id.party == \"SPD\") {\n      spd.push(data[d]);\n    }\n    if (data[d]._id.party == \"FDP\") {\n      fdp.push(data[d]);\n    }\n    if (data[d]._id.party == \"AfD\") {\n      afd.push(data[d]);\n    }\n    if (data[d]._id.party == \"Linke\") {\n      linke.push(data[d]);\n    }\n    if (data[d]._id.party == \"Grün\") {\n      gruen.push(data[d]);\n    }*/\n}\nconst t = [];\n\nfunction Charts() {\n  /*const [hour, setHour] = useState({});\n  const [party, setParty] = useState({});\n  const [count, setCount] = useState({});*/\n\n  const [cduu, setCDUU] = useState({});\n  const [hour, setHour] = useState({});\n  const options = {\n    responsive: true,\n    labels: hour,\n    tooltips: {\n      mode: \"label\",\n    },\n    elements: {\n      line: {\n        fill: false,\n      },\n    },\n    scales: {\n      xAxes: [\n        {\n          display: true,\n        },\n      ],\n      yAxes: [],\n    },\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"http://localhost:8080/jsonProcessed\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          //console.log(data);\n          let chartdata = buildData(data, \"CDU\");\n          setCDUU(chartdata);\n          console.log(chartdata);\n\n          for (let d in data) {\n            t.push(data[d]._id.hour);\n          }\n          setHour(t);\n          //t.push(chartdata);\n        });\n    };\n    fetchData();\n  }, []);\n\n  console.log(cduu);\n  /*axios.get(\"http://localhost:8080/jsonProcessed\").then((res) => {\n    //console.log(res.data);\n    for (let d in res.data) {\n      if (res.data[d]._id.party == \"CDU\") {\n        let cdunew = {\n          x: res.data[d]._id.hour,\n          y: res.data[d].count,\n        };\n        t.push(cdunew);\n      }\n    }\n  });\n  console.log(t);*/\n\n  return (\n    <div className=\"charts\">\n      {cduu?.length > 0 && (\n        <Bar\n          data={{\n            labels: [15, 16, 17, 18, 19, 20, 21, 22],\n            datasets: [\n              {\n                label: \"cdu\",\n                data: cduu,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\nexport default Charts;\n"]},"metadata":{},"sourceType":"module"}