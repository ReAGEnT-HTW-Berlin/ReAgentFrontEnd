{"ast":null,"code":"var _jsxFileName = \"/Users/nasiranebi/Projects/twitter_project/src/Charts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Bar, Line, Pie, Doughnut } from \"react-chartjs-2\";\nimport axios from \"axios\"; //const hour = [];\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction buildSPD(data) {\n  const spd = [];\n\n  for (let d in data) {\n    if (data[d]._id.party == \"SPD\") {\n      let spdnew = {\n        x: data[d]._id.hour,\n        y: data[d].count\n      };\n      spd.push(spdnew);\n    }\n  }\n\n  return spd;\n}\n\nfunction buildCDU(data) {\n  const cdu = [];\n  const fdp = [];\n  const afd = [];\n  const linke = [];\n  const gruen = [];\n\n  for (let d in data) {\n    if (data[d]._id.party == \"CDU\") {\n      let cdunew = {\n        x: data[d]._id.hour,\n        y: data[d].count\n      };\n      cdu.push(cdunew);\n    }\n  }\n\n  return cdu;\n}\n\nconst t = [];\n\nfunction Charts() {\n  _s();\n\n  /*const [hour, setHour] = useState({});\n  const [party, setParty] = useState({});\n  const [count, setCount] = useState({});*/\n  const [cdu, setCDU] = useState({});\n  const [hour, setHour] = useState({});\n  const options = {\n    responsive: true,\n    labels: hour,\n    tooltips: {\n      mode: \"label\"\n    },\n    elements: {\n      line: {\n        fill: false\n      }\n    },\n    scales: {\n      xAxes: [{\n        display: true\n      }],\n      yAxes: []\n    }\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"http://localhost:8080/jsonProcessed\").then(response => {\n        return response.json();\n      }).then(data => {\n        //console.log(data);\n        let chartdataCDU = buildCDU(data);\n        setCDU(chartdataCDU);\n        /*for (let d in data) {\n          t.push(data[d]._id.hour);\n        }\n        setHour(t);*/\n      });\n    };\n\n    fetchData();\n  }, []);\n  console.log(cdu);\n  /*axios.get(\"http://localhost:8080/jsonProcessed\").then((res) => {\n    //console.log(res.data);\n    for (let d in res.data) {\n      if (res.data[d]._id.party == \"CDU\") {\n        let cdunew = {\n          x: res.data[d]._id.hour,\n          y: res.data[d].count,\n        };\n        t.push(cdunew);\n      }\n    }\n  });\n  console.log(t);*/\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"charts\",\n    children: (cdu === null || cdu === void 0 ? void 0 : cdu.length) > 0 && /*#__PURE__*/_jsxDEV(Bar, {\n      data: {\n        labels: [15, 16, 17, 18, 19, 20, 21, 22],\n        datasets: [{\n          label: \"cdu\",\n          data: cdu\n        }]\n      },\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Charts, \"gVYdmucQLqhTgWhqIVuVUpCPOr8=\");\n\n_c = Charts;\nexport default Charts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Charts\");","map":{"version":3,"sources":["/Users/nasiranebi/Projects/twitter_project/src/Charts.js"],"names":["React","useEffect","useState","Bar","Line","Pie","Doughnut","axios","buildSPD","data","spd","d","_id","party","spdnew","x","hour","y","count","push","buildCDU","cdu","fdp","afd","linke","gruen","cdunew","t","Charts","setCDU","setHour","options","responsive","labels","tooltips","mode","elements","line","fill","scales","xAxes","display","yAxes","fetchData","fetch","then","response","json","chartdataCDU","console","log","length","datasets","label"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Bar, Line, Pie, Doughnut } from \"react-chartjs-2\";\nimport axios from \"axios\";\n\n//const hour = [];\nfunction buildSPD(data) {\n  const spd = [];\n  for (let d in data) {\n    if (data[d]._id.party == \"SPD\") {\n      let spdnew = {\n        x: data[d]._id.hour,\n        y: data[d].count,\n      };\n      spd.push(spdnew);\n    }\n  }\n  return spd;\n}\nfunction buildCDU(data) {\n  const cdu = [];\n  const fdp = [];\n  const afd = [];\n  const linke = [];\n  const gruen = [];\n\n  for (let d in data) {\n    if (data[d]._id.party == \"CDU\") {\n      let cdunew = {\n        x: data[d]._id.hour,\n        y: data[d].count,\n      };\n      cdu.push(cdunew);\n    }\n  }\n  return cdu;\n}\nconst t = [];\n\nfunction Charts() {\n  /*const [hour, setHour] = useState({});\n  const [party, setParty] = useState({});\n  const [count, setCount] = useState({});*/\n\n  const [cdu, setCDU] = useState({});\n\n  const [hour, setHour] = useState({});\n  const options = {\n    responsive: true,\n    labels: hour,\n    tooltips: {\n      mode: \"label\",\n    },\n    elements: {\n      line: {\n        fill: false,\n      },\n    },\n    scales: {\n      xAxes: [\n        {\n          display: true,\n        },\n      ],\n      yAxes: [],\n    },\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"http://localhost:8080/jsonProcessed\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          //console.log(data);\n          let chartdataCDU = buildCDU(data);\n          setCDU(chartdataCDU);\n\n          /*for (let d in data) {\n            t.push(data[d]._id.hour);\n          }\n          setHour(t);*/\n        });\n    };\n    fetchData();\n  }, []);\n\n  console.log(cdu);\n  /*axios.get(\"http://localhost:8080/jsonProcessed\").then((res) => {\n    //console.log(res.data);\n    for (let d in res.data) {\n      if (res.data[d]._id.party == \"CDU\") {\n        let cdunew = {\n          x: res.data[d]._id.hour,\n          y: res.data[d].count,\n        };\n        t.push(cdunew);\n      }\n    }\n  });\n  console.log(t);*/\n\n  return (\n    <div className=\"charts\">\n      {cdu?.length > 0 && (\n        <Bar\n          data={{\n            labels: [15, 16, 17, 18, 19, 20, 21, 22],\n            datasets: [\n              {\n                label: \"cdu\",\n                data: cdu,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\nexport default Charts;\n"]},"metadata":{},"sourceType":"module"}