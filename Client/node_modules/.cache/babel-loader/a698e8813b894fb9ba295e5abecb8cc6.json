{"ast":null,"code":"var _jsxFileName = \"/Users/nasiranebi/Projects/twitter_project/src/Charts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Bar, Line, Pie, Doughnut } from \"react-chartjs-2\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst hour = [];\nconst spd = [];\nconst fdp = [];\nconst afd = [];\nconst linke = [];\nconst gruen = [];\n/*\nfunction buildData(data) {\n  const cdu = [];\n\n  for (let d in data) {\n    if (data[d]._id.party == \"CDU\") {\n      let cdunew = {\n        x: data[d]._id.hour,\n        y: data[d].count,\n      };\n      cdu.push(cdunew);\n    }\n    /*if (data[d]._id.party == \"SPD\") {\n      spd.push(data[d]);\n    }\n    if (data[d]._id.party == \"FDP\") {\n      fdp.push(data[d]);\n    }\n    if (data[d]._id.party == \"AfD\") {\n      afd.push(data[d]);\n    }\n    if (data[d]._id.party == \"Linke\") {\n      linke.push(data[d]);\n    }\n    if (data[d]._id.party == \"Grün\") {\n      gruen.push(data[d]);\n    }\n  }\n  return cdu;\n}*/\n\nconst t = [];\n\nfunction Charts() {\n  _s();\n\n  /*const [hour, setHour] = useState({});\n  const [party, setParty] = useState({});\n  const [count, setCount] = useState({});*/\n  const [cduu, setCDUU] = useState({});\n  fetch(\"http://localhost:8080/jsonProcessed\").then(response => {\n    return response.json();\n  }).then(data => {\n    console.log(data); //let chartdata = buildData(data);\n    //setCDUU(chartdata);\n    //console.log(chartdata);\n    //t.push(chartdata);\n\n    for (let d in data) {\n      if (data[d]._id.party == \"CDU\") {\n        let cdunew = {\n          x: data[d]._id.hour,\n          y: data[d].count\n        };\n        t.push(cdunew);\n      }\n    }\n\n    setCDUU(t);\n  });\n  console.log(cduu);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"charts\",\n    children: /*#__PURE__*/_jsxDEV(Bar, {\n      data: {\n        datasets: [{\n          label: \"cdu\",\n          data: cduu,\n          backgroundColor: [\"rgba(255, 99, 132, 0.2)\", \"rgba(54, 162, 235, 0.2)\", \"rgba(255, 206, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\", \"rgba(153, 102, 255, 0.2)\", \"rgba(255, 159, 64, 0.2)\"]\n        }]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Charts, \"KS3d9jQjTcARS14tl+u3g66/Pic=\");\n\n_c = Charts;\nexport default Charts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Charts\");","map":{"version":3,"sources":["/Users/nasiranebi/Projects/twitter_project/src/Charts.js"],"names":["React","useEffect","useState","Bar","Line","Pie","Doughnut","axios","hour","spd","fdp","afd","linke","gruen","t","Charts","cduu","setCDUU","fetch","then","response","json","data","console","log","d","_id","party","cdunew","x","y","count","push","datasets","label","backgroundColor"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,QAAzB,QAAyC,iBAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,IAAI,GAAG,EAAb;AACA,MAAMC,GAAG,GAAG,EAAZ;AACA,MAAMC,GAAG,GAAG,EAAZ;AACA,MAAMC,GAAG,GAAG,EAAZ;AACA,MAAMC,KAAK,GAAG,EAAd;AACA,MAAMC,KAAK,GAAG,EAAd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,CAAC,GAAG,EAAV;;AACA,SAASC,MAAT,GAAkB;AAAA;;AAChB;AACF;AACA;AAEE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,CAAC,EAAD,CAAhC;AAEAgB,EAAAA,KAAK,CAAC,qCAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAc;AAClB,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,GAHH,EAIGF,IAJH,CAISG,IAAD,IAAU;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EADc,CAEd;AACA;AACA;AACA;;AACA,SAAK,IAAIG,CAAT,IAAcH,IAAd,EAAoB;AAClB,UAAIA,IAAI,CAACG,CAAD,CAAJ,CAAQC,GAAR,CAAYC,KAAZ,IAAqB,KAAzB,EAAgC;AAC9B,YAAIC,MAAM,GAAG;AACXC,UAAAA,CAAC,EAAEP,IAAI,CAACG,CAAD,CAAJ,CAAQC,GAAR,CAAYlB,IADJ;AAEXsB,UAAAA,CAAC,EAAER,IAAI,CAACG,CAAD,CAAJ,CAAQM;AAFA,SAAb;AAIAjB,QAAAA,CAAC,CAACkB,IAAF,CAAOJ,MAAP;AACD;AACF;;AACDX,IAAAA,OAAO,CAACH,CAAD,CAAP;AACD,GApBH;AAqBAS,EAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,2BACE,QAAC,GAAD;AACE,MAAA,IAAI,EAAE;AACJiB,QAAAA,QAAQ,EAAE,CACR;AACEC,UAAAA,KAAK,EAAE,KADT;AAEEZ,UAAAA,IAAI,EAAEN,IAFR;AAGEmB,UAAAA,eAAe,EAAE,CACf,yBADe,EAEf,yBAFe,EAGf,yBAHe,EAIf,yBAJe,EAKf,0BALe,EAMf,yBANe;AAHnB,SADQ;AADN;AADR;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD;;GAnDQpB,M;;KAAAA,M;AAoDT,eAAeA,MAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Bar, Line, Pie, Doughnut } from \"react-chartjs-2\";\nimport axios from \"axios\";\n\nconst hour = [];\nconst spd = [];\nconst fdp = [];\nconst afd = [];\nconst linke = [];\nconst gruen = [];\n/*\nfunction buildData(data) {\n  const cdu = [];\n\n  for (let d in data) {\n    if (data[d]._id.party == \"CDU\") {\n      let cdunew = {\n        x: data[d]._id.hour,\n        y: data[d].count,\n      };\n      cdu.push(cdunew);\n    }\n    /*if (data[d]._id.party == \"SPD\") {\n      spd.push(data[d]);\n    }\n    if (data[d]._id.party == \"FDP\") {\n      fdp.push(data[d]);\n    }\n    if (data[d]._id.party == \"AfD\") {\n      afd.push(data[d]);\n    }\n    if (data[d]._id.party == \"Linke\") {\n      linke.push(data[d]);\n    }\n    if (data[d]._id.party == \"Grün\") {\n      gruen.push(data[d]);\n    }\n  }\n  return cdu;\n}*/\nconst t = [];\nfunction Charts() {\n  /*const [hour, setHour] = useState({});\n  const [party, setParty] = useState({});\n  const [count, setCount] = useState({});*/\n\n  const [cduu, setCDUU] = useState({});\n\n  fetch(\"http://localhost:8080/jsonProcessed\")\n    .then((response) => {\n      return response.json();\n    })\n    .then((data) => {\n      console.log(data);\n      //let chartdata = buildData(data);\n      //setCDUU(chartdata);\n      //console.log(chartdata);\n      //t.push(chartdata);\n      for (let d in data) {\n        if (data[d]._id.party == \"CDU\") {\n          let cdunew = {\n            x: data[d]._id.hour,\n            y: data[d].count,\n          };\n          t.push(cdunew);\n        }\n      }\n      setCDUU(t);\n    });\n  console.log(cduu);\n  return (\n    <div className=\"charts\">\n      <Bar\n        data={{\n          datasets: [\n            {\n              label: \"cdu\",\n              data: cduu,\n              backgroundColor: [\n                \"rgba(255, 99, 132, 0.2)\",\n                \"rgba(54, 162, 235, 0.2)\",\n                \"rgba(255, 206, 86, 0.2)\",\n                \"rgba(75, 192, 192, 0.2)\",\n                \"rgba(153, 102, 255, 0.2)\",\n                \"rgba(255, 159, 64, 0.2)\",\n              ],\n            },\n          ],\n        }}\n      />\n    </div>\n  );\n}\nexport default Charts;\n"]},"metadata":{},"sourceType":"module"}