{"ast":null,"code":"var _jsxFileName = \"/Users/nasiranebi/Projects/twitter_project/src/Charts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Bar, Line, Pie, Doughnut } from \"react-chartjs-2\";\nimport numeral from \"numeral\"; //const hour = [];\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction buildSPD(data) {\n  const spd = [];\n\n  for (let d in data) {\n    if (data[d]._id.party == \"SPD\") {\n      let spdnew = {\n        x: data[d]._id.month + \".\" + data[d]._id.day + \".\" + data[d]._id.hour,\n        y: data[d].count\n      };\n      spd.push(spdnew);\n    }\n  }\n\n  return spd;\n}\n\nfunction buildFDP(data) {\n  const fdp = [];\n\n  for (let d in data) {\n    if (data[d]._id.party == \"FDP\") {\n      let fdpnew = {\n        x: data[d]._id.hour,\n        y: data[d].count\n      };\n      fdp.push(fdpnew);\n    }\n  }\n\n  return fdp;\n}\n\nfunction buildAFD(data) {\n  const afd = [];\n\n  for (let d in data) {\n    if (data[d]._id.party == \"AfD\") {\n      let afdnew = {\n        x: data[d]._id.hour,\n        y: data[d].count\n      };\n      afd.push(afdnew);\n    }\n  }\n\n  return afd;\n}\n\nfunction buildLinke(data) {\n  const linke = [];\n\n  for (let d in data) {\n    if (data[d]._id.party == \"Linke\") {\n      let linkenew = {\n        x: data[d]._id.hour,\n        y: data[d].count\n      };\n      linke.push(linkenew);\n    }\n  }\n\n  return linke;\n}\n\nfunction buildGruen(data) {\n  const gruen = [];\n\n  for (let d in data) {\n    if (data[d]._id.party == \"B90\") {\n      let gruennew = {\n        x: data[d]._id.hour,\n        y: data[d].count\n      };\n      gruen.push(gruennew);\n    }\n  }\n\n  return gruen;\n}\n\nfunction buildCDU(data) {\n  const cdu = [];\n\n  for (let d in data) {\n    if (data[d]._id.party == \"CDU\") {\n      let cdunew = {\n        x: data[d]._id.hour,\n        y: data[d].count\n      };\n      cdu.push(cdunew);\n    }\n  }\n\n  return cdu;\n}\n\nconst options = {\n  legend: {\n    display: false\n  },\n  elements: {\n    point: {\n      radius: 1\n    }\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      }\n    }\n  },\n  scales: {\n    xAxes: [{\n      type: \"time\",\n      time: {\n        format: \"MM/DD\",\n        tooltipFormat: \"ll\"\n      }\n    }]\n    /*yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],*/\n\n  }\n};\n\nfunction Charts() {\n  _s();\n\n  const [cdu, setCDU] = useState(0);\n  const [spd, setSPD] = useState(0);\n  const [fdp, setFDP] = useState(0);\n  const [afd, setAFD] = useState(0);\n  const [linke, setLinke] = useState(0);\n  const [gruen, setGruen] = useState(0);\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"http://localhost:8080/countTotalByHourAndParty?year=2019&month=1&month=2&month=3&month=4&month=5&month=6&month=7&month=8&month=9&month=10&month=11&month=12\").then(response => {\n        return response.json();\n      }).then(data => {\n        //console.log(data);\n        let chartdataCDU = buildCDU(data);\n        setCDU(chartdataCDU);\n        let chartdataSPD = buildSPD(data);\n        setSPD(chartdataSPD);\n        let chartdataFDP = buildFDP(data);\n        setFDP(chartdataFDP);\n        let chartdataAFD = buildAFD(data);\n        setAFD(chartdataAFD);\n        let chartdataLinke = buildLinke(data);\n        setLinke(chartdataLinke);\n        let chartdataGruen = buildGruen(data);\n        setGruen(chartdataGruen);\n        console.log(chartdataSPD);\n      });\n    };\n\n    fetchData();\n  }, []);\n  return (\n    /*#__PURE__*/\n\n    /**\n     * {\n                label: \"CDU\",\n                data: cdu,\n                backgroundColor: \"rgba(255, 99, 132, 0.2)\",\n              },\n              ,\n              {\n                label: \"FDP\",\n                data: fdp,\n                backgroundColor: \"rgba(255, 206, 86, 0.2)\",\n              },\n              {\n                label: \"AFD\",\n                data: afd,\n                backgroundColor: \"rgba(75, 192, 192, 0.2)\",\n              },\n              {\n                label: \"Linke\",\n                data: linke,\n                backgroundColor: \"rgba(153, 102, 255, 0.2)\",\n              },\n              {\n                label: \"Gruen\",\n                data: gruen,\n    s     * \n     * \n     */\n    _jsxDEV(\"div\", {\n      className: \"charts\",\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: {\n          datasets: [{\n            label: \"SPD\",\n            data: spd,\n            backgroundColor: \"rgba(54, 162, 235, 0.2)\"\n          }]\n        },\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(Charts, \"kRifsUkBWZ4BwE6BSOT8ch/aRzg=\");\n\n_c = Charts;\nexport default Charts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Charts\");","map":{"version":3,"sources":["/Users/nasiranebi/Projects/twitter_project/src/Charts.js"],"names":["React","useEffect","useState","Bar","Line","Pie","Doughnut","numeral","buildSPD","data","spd","d","_id","party","spdnew","x","month","day","hour","y","count","push","buildFDP","fdp","fdpnew","buildAFD","afd","afdnew","buildLinke","linke","linkenew","buildGruen","gruen","gruennew","buildCDU","cdu","cdunew","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","format","scales","xAxes","type","time","tooltipFormat","Charts","setCDU","setSPD","setFDP","setAFD","setLinke","setGruen","fetchData","fetch","then","response","json","chartdataCDU","chartdataSPD","chartdataFDP","chartdataAFD","chartdataLinke","chartdataGruen","console","log","datasets","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Bar, Line, Pie, Doughnut } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\n//const hour = [];\nfunction buildSPD(data) {\n  const spd = [];\n  for (let d in data) {\n    if (data[d]._id.party == \"SPD\") {\n      let spdnew = {\n        x: data[d]._id.month + \".\" + data[d]._id.day + \".\" + data[d]._id.hour,\n        y: data[d].count,\n      };\n      spd.push(spdnew);\n    }\n  }\n  return spd;\n}\nfunction buildFDP(data) {\n  const fdp = [];\n  for (let d in data) {\n    if (data[d]._id.party == \"FDP\") {\n      let fdpnew = {\n        x: data[d]._id.hour,\n        y: data[d].count,\n      };\n      fdp.push(fdpnew);\n    }\n  }\n  return fdp;\n}\nfunction buildAFD(data) {\n  const afd = [];\n  for (let d in data) {\n    if (data[d]._id.party == \"AfD\") {\n      let afdnew = {\n        x: data[d]._id.hour,\n        y: data[d].count,\n      };\n      afd.push(afdnew);\n    }\n  }\n  return afd;\n}\nfunction buildLinke(data) {\n  const linke = [];\n  for (let d in data) {\n    if (data[d]._id.party == \"Linke\") {\n      let linkenew = {\n        x: data[d]._id.hour,\n        y: data[d].count,\n      };\n      linke.push(linkenew);\n    }\n  }\n  return linke;\n}\nfunction buildGruen(data) {\n  const gruen = [];\n  for (let d in data) {\n    if (data[d]._id.party == \"B90\") {\n      let gruennew = {\n        x: data[d]._id.hour,\n        y: data[d].count,\n      };\n      gruen.push(gruennew);\n    }\n  }\n  return gruen;\n}\n\nfunction buildCDU(data) {\n  const cdu = [];\n  for (let d in data) {\n    if (data[d]._id.party == \"CDU\") {\n      let cdunew = {\n        x: data[d]._id.hour,\n        y: data[d].count,\n      };\n      cdu.push(cdunew);\n    }\n  }\n  return cdu;\n}\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 1,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    /*yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],*/\n  },\n};\n\nfunction Charts() {\n  const [cdu, setCDU] = useState(0);\n  const [spd, setSPD] = useState(0);\n  const [fdp, setFDP] = useState(0);\n  const [afd, setAFD] = useState(0);\n  const [linke, setLinke] = useState(0);\n  const [gruen, setGruen] = useState(0);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\n        \"http://localhost:8080/countTotalByHourAndParty?year=2019&month=1&month=2&month=3&month=4&month=5&month=6&month=7&month=8&month=9&month=10&month=11&month=12\"\n      )\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          //console.log(data);\n          let chartdataCDU = buildCDU(data);\n          setCDU(chartdataCDU);\n          let chartdataSPD = buildSPD(data);\n          setSPD(chartdataSPD);\n          let chartdataFDP = buildFDP(data);\n          setFDP(chartdataFDP);\n          let chartdataAFD = buildAFD(data);\n          setAFD(chartdataAFD);\n          let chartdataLinke = buildLinke(data);\n          setLinke(chartdataLinke);\n          let chartdataGruen = buildGruen(data);\n          setGruen(chartdataGruen);\n\n          console.log(chartdataSPD);\n        });\n    };\n    fetchData();\n  }, []);\n  return (\n    /**\n     * {\n                label: \"CDU\",\n                data: cdu,\n                backgroundColor: \"rgba(255, 99, 132, 0.2)\",\n              },\n              ,\n              {\n                label: \"FDP\",\n                data: fdp,\n                backgroundColor: \"rgba(255, 206, 86, 0.2)\",\n              },\n              {\n                label: \"AFD\",\n                data: afd,\n                backgroundColor: \"rgba(75, 192, 192, 0.2)\",\n              },\n              {\n                label: \"Linke\",\n                data: linke,\n                backgroundColor: \"rgba(153, 102, 255, 0.2)\",\n              },\n              {\n                label: \"Gruen\",\n                data: gruen,\ns     * \n     * \n     */\n    <div className=\"charts\">\n      {\n        <Bar\n          data={{\n            datasets: [\n              {\n                label: \"SPD\",\n                data: spd,\n                backgroundColor: \"rgba(54, 162, 235, 0.2)\",\n              },\n            ],\n          }}\n          options={options}\n        />\n      }\n    </div>\n  );\n}\nexport default Charts;\n"]},"metadata":{},"sourceType":"module"}