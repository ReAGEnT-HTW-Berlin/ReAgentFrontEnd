{"ast":null,"code":"var _jsxFileName = \"/Users/nasiranebi/Projects/twitter_project/src/TotalTweets.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Bar, Line, Pie, Doughnut } from \"react-chartjs-2\";\nimport numeral from \"numeral\"; //const hour = [];\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction buildSPD(data) {\n  const spd = [];\n\n  for (let d in data) {\n    if (data[d]._id.party == \"SPD\") {\n      let spdnew = {\n        x: data[d]._id.party,\n        y: data[d].count\n      };\n      spd.push(spdnew);\n    }\n  }\n\n  return spd;\n}\n\nfunction buildFDP(data) {\n  const fdp = [];\n\n  for (let d in data) {\n    if (data[d]._id.party == \"FDP\") {\n      let fdpnew = {\n        x: data[d]._id.hour,\n        y: data[d].count\n      };\n      fdp.push(fdpnew);\n    }\n  }\n\n  return fdp;\n}\n\nfunction buildAFD(data) {\n  const afd = [];\n\n  for (let d in data) {\n    if (data[d]._id.party == \"AfD\") {\n      let afdnew = {\n        x: data[d]._id.hour,\n        y: data[d].count\n      };\n      afd.push(afdnew);\n    }\n  }\n\n  return afd;\n}\n\nfunction buildLinke(data) {\n  const linke = [];\n\n  for (let d in data) {\n    if (data[d]._id.party == \"Linke\") {\n      let linkenew = {\n        x: data[d]._id.hour,\n        y: data[d].count\n      };\n      linke.push(linkenew);\n    }\n  }\n\n  return linke;\n}\n\nfunction buildGruen(data) {\n  const gruen = [];\n\n  for (let d in data) {\n    if (data[d]._id.party == \"B90\") {\n      let gruennew = {\n        x: data[d]._id.hour,\n        y: data[d].count\n      };\n      gruen.push(gruennew);\n    }\n  }\n\n  return gruen;\n}\n\nfunction buildCDU(data) {\n  const cdu = [];\n\n  for (let d in data) {\n    if (data[d]._id.party == \"CDU\") {\n      let cdunew = {\n        x: data[d]._id.hour,\n        y: data[d].count\n      };\n      cdu.push(cdunew);\n    }\n  }\n\n  return cdu;\n}\n\nfunction buildChartData(data) {\n  const chartdata = [];\n\n  for (let d in data) {\n    /*let newdata = {\n      x: data[d]._id.party,\n      y: data[d].count,\n    };*/\n    data.push(data[d].count); //console.log(newdata);\n  }\n\n  console.log(chartdata);\n  return chartdata;\n}\n\nfunction Charts() {\n  _s();\n\n  const [cdu, setCDU] = useState(0);\n  const [spd, setSPD] = useState(0);\n  const [fdp, setFDP] = useState(0);\n  const [afd, setAFD] = useState(0);\n  const [linke, setLinke] = useState(0);\n  const [gruen, setGruen] = useState(0);\n  const [d, setD] = useState(0);\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"http://localhost:8080/countTotalByParty\").then(response => {\n        return response.json();\n      }).then(data => {\n        console.log(data);\n        let chartData = buildChartData(data);\n        setD(chartData);\n        console.log(chartData);\n        /*let chartdataCDU = buildCDU(data);\n        setCDU(chartdataCDU);\n        let chartdataSPD = buildSPD(data);\n        setSPD(chartdataSPD);\n        let chartdataFDP = buildFDP(data);\n        setFDP(chartdataFDP);\n        let chartdataAFD = buildAFD(data);\n        setAFD(chartdataAFD);\n        let chartdataLinke = buildLinke(data);\n        setLinke(chartdataLinke);\n        let chartdataGruen = buildGruen(data);\n        setGruen(chartdataGruen);\n         console.log(chartdataSPD);*/\n        //console.log(chartData);\n      });\n    };\n\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"charts\",\n    children: /*#__PURE__*/_jsxDEV(Bar, {\n      data: {\n        labels: [\"Linke\", \"SPD\", \"FPD\", \"Gr√ºn\", \"CDU\", \"AfD\", \"Parteilos\", \"CSU\"],\n        datasets: [{\n          label: \"total tweets 2017-2021\",\n          data: d,\n          backgroundColor: \"rgba(54, 162, 235, 0.2)\"\n        }]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Charts, \"qB3FbTWi7dOsFi1Cqs72Tmq8Wjc=\");\n\n_c = Charts;\nexport default Charts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Charts\");","map":{"version":3,"sources":["/Users/nasiranebi/Projects/twitter_project/src/TotalTweets.js"],"names":["React","useEffect","useState","Bar","Line","Pie","Doughnut","numeral","buildSPD","data","spd","d","_id","party","spdnew","x","y","count","push","buildFDP","fdp","fdpnew","hour","buildAFD","afd","afdnew","buildLinke","linke","linkenew","buildGruen","gruen","gruennew","buildCDU","cdu","cdunew","buildChartData","chartdata","console","log","Charts","setCDU","setSPD","setFDP","setAFD","setLinke","setGruen","setD","fetchData","fetch","then","response","json","chartData","labels","datasets","label","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Bar, Line, Pie, Doughnut } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\n//const hour = [];\nfunction buildSPD(data) {\n  const spd = [];\n  for (let d in data) {\n    if (data[d]._id.party == \"SPD\") {\n      let spdnew = {\n        x: data[d]._id.party,\n        y: data[d].count,\n      };\n      spd.push(spdnew);\n    }\n  }\n  return spd;\n}\nfunction buildFDP(data) {\n  const fdp = [];\n  for (let d in data) {\n    if (data[d]._id.party == \"FDP\") {\n      let fdpnew = {\n        x: data[d]._id.hour,\n        y: data[d].count,\n      };\n      fdp.push(fdpnew);\n    }\n  }\n  return fdp;\n}\nfunction buildAFD(data) {\n  const afd = [];\n  for (let d in data) {\n    if (data[d]._id.party == \"AfD\") {\n      let afdnew = {\n        x: data[d]._id.hour,\n        y: data[d].count,\n      };\n      afd.push(afdnew);\n    }\n  }\n  return afd;\n}\nfunction buildLinke(data) {\n  const linke = [];\n  for (let d in data) {\n    if (data[d]._id.party == \"Linke\") {\n      let linkenew = {\n        x: data[d]._id.hour,\n        y: data[d].count,\n      };\n      linke.push(linkenew);\n    }\n  }\n  return linke;\n}\nfunction buildGruen(data) {\n  const gruen = [];\n  for (let d in data) {\n    if (data[d]._id.party == \"B90\") {\n      let gruennew = {\n        x: data[d]._id.hour,\n        y: data[d].count,\n      };\n      gruen.push(gruennew);\n    }\n  }\n  return gruen;\n}\n\nfunction buildCDU(data) {\n  const cdu = [];\n  for (let d in data) {\n    if (data[d]._id.party == \"CDU\") {\n      let cdunew = {\n        x: data[d]._id.hour,\n        y: data[d].count,\n      };\n      cdu.push(cdunew);\n    }\n  }\n  return cdu;\n}\nfunction buildChartData(data) {\n  const chartdata = [];\n  for (let d in data) {\n    /*let newdata = {\n      x: data[d]._id.party,\n      y: data[d].count,\n    };*/\n\n    data.push(data[d].count);\n    //console.log(newdata);\n  }\n  console.log(chartdata);\n  return chartdata;\n}\n\nfunction Charts() {\n  const [cdu, setCDU] = useState(0);\n  const [spd, setSPD] = useState(0);\n  const [fdp, setFDP] = useState(0);\n  const [afd, setAFD] = useState(0);\n  const [linke, setLinke] = useState(0);\n  const [gruen, setGruen] = useState(0);\n  const [d, setD] = useState(0);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"http://localhost:8080/countTotalByParty\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          console.log(data);\n          let chartData = buildChartData(data);\n          setD(chartData);\n          console.log(chartData);\n          /*let chartdataCDU = buildCDU(data);\n          setCDU(chartdataCDU);\n          let chartdataSPD = buildSPD(data);\n          setSPD(chartdataSPD);\n          let chartdataFDP = buildFDP(data);\n          setFDP(chartdataFDP);\n          let chartdataAFD = buildAFD(data);\n          setAFD(chartdataAFD);\n          let chartdataLinke = buildLinke(data);\n          setLinke(chartdataLinke);\n          let chartdataGruen = buildGruen(data);\n          setGruen(chartdataGruen);\n\n          console.log(chartdataSPD);*/\n\n          //console.log(chartData);\n        });\n    };\n    fetchData();\n  }, []);\n  return (\n    <div className=\"charts\">\n      {\n        <Bar\n          data={{\n            labels: [\n              \"Linke\",\n              \"SPD\",\n              \"FPD\",\n              \"Gr√ºn\",\n              \"CDU\",\n              \"AfD\",\n              \"Parteilos\",\n              \"CSU\",\n            ],\n            datasets: [\n              {\n                label: \"total tweets 2017-2021\",\n                data: d,\n                backgroundColor: \"rgba(54, 162, 235, 0.2)\",\n              },\n            ],\n          }}\n        />\n      }\n    </div>\n  );\n}\nexport default Charts;\n"]},"metadata":{},"sourceType":"module"}