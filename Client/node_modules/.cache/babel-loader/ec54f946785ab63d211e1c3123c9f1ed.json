{"ast":null,"code":"var _jsxFileName = \"/Users/nasiranebi/Projects/twitter_project/src/Charts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Bar, Line, Pie, Doughnut } from \"react-chartjs-2\";\nimport axios from \"axios\"; //const hour = [];\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction buildSPD(data) {\n  const spd = [];\n\n  for (let d in data) {\n    if (data[d]._id.party == \"SPD\") {\n      let spdnew = {\n        x: data[d]._id.hour,\n        y: data[d].count\n      };\n      spd.push(spdnew);\n    }\n  }\n\n  return spd;\n}\n\nfunction buildFDP(data) {\n  const fdp = [];\n\n  for (let d in data) {\n    if (data[d]._id.party == \"FDP\") {\n      let fdpnew = {\n        x: data[d]._id.hour,\n        y: data[d].count\n      };\n      fdp.push(fdpnew);\n    }\n  }\n\n  return fdp;\n}\n\nfunction buildAFD(data) {\n  const afd = [];\n\n  for (let d in data) {\n    if (data[d]._id.party == \"AFD\") {\n      let afdnew = {\n        x: data[d]._id.hour,\n        y: data[d].count\n      };\n      afd.push(afdnew);\n    }\n  }\n\n  return afd;\n}\n\nfunction buildCDU(data) {\n  const cdu = [];\n  const fdp = [];\n  const afd = [];\n  const linke = [];\n  const gruen = [];\n\n  for (let d in data) {\n    if (data[d]._id.party == \"CDU\") {\n      let cdunew = {\n        x: data[d]._id.hour,\n        y: data[d].count\n      };\n      cdu.push(cdunew);\n    }\n  }\n\n  return cdu;\n}\n\nconst t = [];\n\nfunction Charts() {\n  _s();\n\n  /*const [hour, setHour] = useState({});\n  const [party, setParty] = useState({});\n  const [count, setCount] = useState({});*/\n  const [cdu, setCDU] = useState({});\n  const [spd, setSPD] = useState({});\n  const [fdp, setFDP] = useState({});\n  const [afd, setAFD] = useState({});\n  const [linke, setLinke] = useState({});\n  const [gruen, setGruen] = useState({});\n  const [hour, setHour] = useState({});\n  const options = {\n    responsive: true,\n    tooltips: {\n      mode: \"label\"\n    },\n    elements: {\n      line: {\n        fill: false\n      }\n    },\n    scales: {\n      xAxes: [{\n        display: true\n      }],\n      yAxes: []\n    }\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"http://localhost:8080/jsonProcessed\").then(response => {\n        return response.json();\n      }).then(data => {\n        //console.log(data);\n        let chartdataCDU = buildCDU(data);\n        setCDU(chartdataCDU);\n        let chartdataSPD = buildSPD(data);\n        setSPD(chartdataSPD);\n        /*for (let d in data) {\n          t.push(data[d]._id.hour);\n        }\n        setHour(t);*/\n      });\n    };\n\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"charts\",\n    children: (cdu === null || cdu === void 0 ? void 0 : cdu.length) > 0 && (spd === null || spd === void 0 ? void 0 : spd.length) > 0 && /*#__PURE__*/_jsxDEV(Bar, {\n      data: {\n        labels: [15, 16, 17, 18, 19, 20, 21, 22],\n        datasets: [{\n          label: \"CDU\",\n          data: cdu,\n          backgroundColor: \"rgba(255, 99, 132, 0.2)\"\n        }, {\n          label: \"SPD\",\n          data: spd,\n          backgroundColor: \"rgba(54, 162, 235, 0.2)\"\n        }]\n      } //options={options}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Charts, \"TS0gS10tGzxgro+WWcTC9v/Xx5w=\");\n\n_c = Charts;\nexport default Charts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Charts\");","map":{"version":3,"sources":["/Users/nasiranebi/Projects/twitter_project/src/Charts.js"],"names":["React","useEffect","useState","Bar","Line","Pie","Doughnut","axios","buildSPD","data","spd","d","_id","party","spdnew","x","hour","y","count","push","buildFDP","fdp","fdpnew","buildAFD","afd","afdnew","buildCDU","cdu","linke","gruen","cdunew","t","Charts","setCDU","setSPD","setFDP","setAFD","setLinke","setGruen","setHour","options","responsive","tooltips","mode","elements","line","fill","scales","xAxes","display","yAxes","fetchData","fetch","then","response","json","chartdataCDU","chartdataSPD","length","labels","datasets","label","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Bar, Line, Pie, Doughnut } from \"react-chartjs-2\";\nimport axios from \"axios\";\n\n//const hour = [];\nfunction buildSPD(data) {\n  const spd = [];\n  for (let d in data) {\n    if (data[d]._id.party == \"SPD\") {\n      let spdnew = {\n        x: data[d]._id.hour,\n        y: data[d].count,\n      };\n      spd.push(spdnew);\n    }\n  }\n  return spd;\n}\nfunction buildFDP(data) {\n  const fdp = [];\n  for (let d in data) {\n    if (data[d]._id.party == \"FDP\") {\n      let fdpnew = {\n        x: data[d]._id.hour,\n        y: data[d].count,\n      };\n      fdp.push(fdpnew);\n    }\n  }\n  return fdp;\n}\nfunction buildAFD(data) {\n  const afd = [];\n  for (let d in data) {\n    if (data[d]._id.party == \"AFD\") {\n      let afdnew = {\n        x: data[d]._id.hour,\n        y: data[d].count,\n      };\n      afd.push(afdnew);\n    }\n  }\n  return afd;\n}\nfunction buildCDU(data) {\n  const cdu = [];\n  const fdp = [];\n  const afd = [];\n  const linke = [];\n  const gruen = [];\n\n  for (let d in data) {\n    if (data[d]._id.party == \"CDU\") {\n      let cdunew = {\n        x: data[d]._id.hour,\n        y: data[d].count,\n      };\n      cdu.push(cdunew);\n    }\n  }\n  return cdu;\n}\nconst t = [];\n\nfunction Charts() {\n  /*const [hour, setHour] = useState({});\n  const [party, setParty] = useState({});\n  const [count, setCount] = useState({});*/\n\n  const [cdu, setCDU] = useState({});\n  const [spd, setSPD] = useState({});\n  const [fdp, setFDP] = useState({});\n  const [afd, setAFD] = useState({});\n  const [linke, setLinke] = useState({});\n  const [gruen, setGruen] = useState({});\n\n  const [hour, setHour] = useState({});\n  const options = {\n    responsive: true,\n    tooltips: {\n      mode: \"label\",\n    },\n    elements: {\n      line: {\n        fill: false,\n      },\n    },\n    scales: {\n      xAxes: [\n        {\n          display: true,\n        },\n      ],\n      yAxes: [],\n    },\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"http://localhost:8080/jsonProcessed\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          //console.log(data);\n          let chartdataCDU = buildCDU(data);\n          setCDU(chartdataCDU);\n          let chartdataSPD = buildSPD(data);\n          setSPD(chartdataSPD);\n\n          /*for (let d in data) {\n            t.push(data[d]._id.hour);\n          }\n          setHour(t);*/\n        });\n    };\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"charts\">\n      {cdu?.length > 0 && spd?.length > 0 && (\n        <Bar\n          data={{\n            labels: [15, 16, 17, 18, 19, 20, 21, 22],\n            datasets: [\n              {\n                label: \"CDU\",\n                data: cdu,\n                backgroundColor: \"rgba(255, 99, 132, 0.2)\",\n              },\n              {\n                label: \"SPD\",\n                data: spd,\n                backgroundColor: \"rgba(54, 162, 235, 0.2)\",\n              },\n            ],\n          }}\n          //options={options}\n        />\n      )}\n    </div>\n  );\n}\nexport default Charts;\n"]},"metadata":{},"sourceType":"module"}