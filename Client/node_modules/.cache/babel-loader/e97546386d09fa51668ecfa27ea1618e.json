{"ast":null,"code":"var _jsxFileName = \"/Users/nasiranebi/Projects/twitter_project/src/Charts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Bar, Line, Pie, Doughnut } from \"react-chartjs-2\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst buildChartData = data => {\n  let chartData = [];\n\n  for (let d in data) {\n    console.log(data[d].count);\n  }\n};\n\nfunction Charts() {\n  _s();\n\n  /*const [hour, setHour] = useState({});\n  const [party, setParty] = useState({});\n  const [count, setCount] = useState({});*/\n  const cdu = [];\n  const spd = [];\n  const fdp = [];\n  const afd = [];\n  const linke = [];\n  const gruen = [];\n  const hour = [];\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"http://localhost:8080/jsonProcessed\").then(response => {\n        return response.json();\n      }).then(data => {\n        console.log(data);\n\n        for (let d in data) {\n          hour.push(data[d]._id.hour);\n\n          if (data[d]._id.party == \"CDU\") {\n            cdu.push(data[d]);\n          }\n\n          if (data[d]._id.party == \"SPD\") {\n            spd.push(data[d]);\n          }\n\n          if (data[d]._id.party == \"FDP\") {\n            fdp.push(data[d]);\n          }\n\n          if (data[d]._id.party == \"AfD\") {\n            afd.push(data[d]);\n          }\n\n          if (data[d]._id.party == \"Linke\") {\n            linke.push(data[d]);\n          }\n\n          if (data[d]._id.party == \"Grün\") {\n            gruen.push(data[d]);\n          }\n        }\n      });\n    };\n\n    fetchData();\n  });\n  console.log(hour);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"charts\",\n    children: /*#__PURE__*/_jsxDEV(Bar, {\n      data: {\n        labels: hour,\n        datasets: [{\n          label: \"# of votes\",\n          data: [12, 19, 3, 5, 2, 3],\n          backgroundColor: [\"rgba(255, 99, 132, 0.2)\", \"rgba(54, 162, 235, 0.2)\", \"rgba(255, 206, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\", \"rgba(153, 102, 255, 0.2)\", \"rgba(255, 159, 64, 0.2)\"]\n        }]\n      },\n      options: {\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Charts, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Charts;\nexport default Charts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Charts\");","map":{"version":3,"sources":["/Users/nasiranebi/Projects/twitter_project/src/Charts.js"],"names":["React","useEffect","useState","Bar","Line","Pie","Doughnut","axios","buildChartData","data","chartData","d","console","log","count","Charts","cdu","spd","fdp","afd","linke","gruen","hour","fetchData","fetch","then","response","json","push","_id","party","labels","datasets","label","backgroundColor","maintainAspectRatio","scales","y","beginAtZero"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Bar, Line, Pie, Doughnut } from \"react-chartjs-2\";\nimport axios from \"axios\";\n\nconst buildChartData = (data) => {\n  let chartData = [];\n  for (let d in data) {\n    console.log(data[d].count);\n  }\n};\n\nfunction Charts() {\n  /*const [hour, setHour] = useState({});\n  const [party, setParty] = useState({});\n  const [count, setCount] = useState({});*/\n\n  const cdu = [];\n  const spd = [];\n  const fdp = [];\n  const afd = [];\n  const linke = [];\n  const gruen = [];\n\n  const hour = [];\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"http://localhost:8080/jsonProcessed\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          console.log(data);\n          for (let d in data) {\n            hour.push(data[d]._id.hour);\n            if (data[d]._id.party == \"CDU\") {\n              cdu.push(data[d]);\n            }\n            if (data[d]._id.party == \"SPD\") {\n              spd.push(data[d]);\n            }\n            if (data[d]._id.party == \"FDP\") {\n              fdp.push(data[d]);\n            }\n            if (data[d]._id.party == \"AfD\") {\n              afd.push(data[d]);\n            }\n            if (data[d]._id.party == \"Linke\") {\n              linke.push(data[d]);\n            }\n            if (data[d]._id.party == \"Grün\") {\n              gruen.push(data[d]);\n            }\n          }\n        });\n    };\n\n    fetchData();\n  });\n  console.log(hour);\n  return (\n    <div className=\"charts\">\n      <Bar\n        data={{\n          labels: hour,\n          datasets: [\n            {\n              label: \"# of votes\",\n              data: [12, 19, 3, 5, 2, 3],\n              backgroundColor: [\n                \"rgba(255, 99, 132, 0.2)\",\n                \"rgba(54, 162, 235, 0.2)\",\n                \"rgba(255, 206, 86, 0.2)\",\n                \"rgba(75, 192, 192, 0.2)\",\n                \"rgba(153, 102, 255, 0.2)\",\n                \"rgba(255, 159, 64, 0.2)\",\n              ],\n            },\n          ],\n        }}\n        options={{\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              beginAtZero: true,\n            },\n          },\n        }}\n      />\n    </div>\n  );\n}\nexport default Charts;\n"]},"metadata":{},"sourceType":"module"}